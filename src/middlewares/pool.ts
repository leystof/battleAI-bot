import {InlineKeyboard, NextFunction} from 'grammy'
import {matchRepository} from "@/database";
import {pool} from "@/modules/pool/instance";
import {Context} from "@/database/models/context";
import {MatchStatus} from "@/database/models/match";
import {setMatchPrompt} from "@/handlers/game/match/prompt/setPrompt";

export const poolMiddleware = async (ctx: Context, next: NextFunction) => {
    const userInPool = pool.isInPool(ctx.user.id)
    const userInMatch = pool.isInMatch(ctx.user.id)

    if (userInPool && ctx?.callbackQuery?.data !== "game match cancel") {
        return ctx.reply(`‚ö†Ô∏è –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∏—Å–∫–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`, {
            reply_markup: new InlineKeyboard()
                .text("üö´ –û—Ç–º–µ–Ω–∞", "game match cancel")
        })
    }

    if (userInMatch) {
        if (ctx?.callbackQuery?.data !== undefined) {
            return ctx.reply(`‚ö†Ô∏è –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–∞—Ç—á–µ!\n–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏`)
        }

        const threeMinutesAgo = new Date(Date.now() - 3 * 60 * 1000);

        const match = await matchRepository
            .createQueryBuilder("match")
            .leftJoinAndSelect("match.player1", "player1")
            .leftJoinAndSelect("match.player2", "player2")
            .where("match.created_at >= :time", { time: threeMinutesAgo })
            .andWhere("match.status IN (:...statuses)", {
                statuses: [MatchStatus.WAIT_PROMPTS, MatchStatus.QUEUE, MatchStatus.ANALYZE]
            })
            .andWhere(
                "(player1.id = :userId OR player2.id = :userId)",
                { userId: ctx.user.id }
            )
            .orderBy("match.created_at", "DESC")
            .getOne();


        if (!match) {
            pool.markGameFinished(ctx.user.id, ctx.user.id)
            return next()
        }

        if (match.status === MatchStatus.QUEUE) {
            return ctx.reply(`‚ö†Ô∏è –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–∞—Ç—á–µ!\n–û–∂–∏–¥–∞–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏`)
        }

        if (match.status === MatchStatus.ANALYZE) {
            return ctx.reply(`<b>–ò–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã.</b>`)
        }

        if (match.status === MatchStatus.WAIT_PROMPTS) {
            const isText = ctx.message?.text && typeof ctx.message.text === "string";
            const blockedIncludes = ["üéÆ –ò–≥—Ä–∞—Ç—å", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "‚ùì –ü—Ä–∞–≤–∏–ª–∞", "üì¢ –ö–∞–Ω–∞–ª—ã", "/start", "/admin"]; // –¥–æ–ø–æ–ª–Ω–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

            const text = ctx.message?.text ?? "";

            const isBlockedText =
                !isText ||
                text.startsWith("/") ||
                text.length > 220 ||
                blockedIncludes.some(word => text.toLowerCase().includes(word.toLowerCase()));

            if (isBlockedText) {
                return ctx.reply(`‚ö†Ô∏è –°–µ–π—á–∞—Å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ 220 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ –∫–æ–º–∞–Ω–¥, –∫–Ω–æ–ø–æ–∫ –∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.`);
            }

            return setMatchPrompt(ctx,match,ctx.message.text)
        }

    }

    return next()
}