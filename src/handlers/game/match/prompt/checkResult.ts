import {configRepository, matchRepository, userRepository} from "@/database";
import {
    genMatchPromptResultText,
    sendMsgToUser
} from "@/handlers/game/match/helpers/message";
import fetch from "node-fetch";

import {getPercent} from "@/helpers/getPercent";
import {MatchStatus} from "@/database/models/match";
import {pool} from "@/modules/pool/instance";
import {AI} from "@/services/openai";
import {log} from "@/utils/logger";
import {clearMatchTimer} from "@/modules/timer/match";
import {alertBot, bot} from "@/utils/bot";
import {getUsername} from "@/helpers/getUsername";
import {generateImage} from "@/services/falai/generateImg";
import * as wasi from "wasi";
import {getCachedConfig} from "@/modules/cache/config";

export interface PromptAccuracyResult {
    player1Accuracy: number
    player2Accuracy: number
    originalPromptRu: string,
    reasoning: string
}

let noPromptsUserText = `‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –∏—Å—Ç–µ–∫–ª–æ! –ù–∏ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ —É—Å–ø–µ–ª –æ—Ç–≤–µ—Ç–∏—Ç—å. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∑–∞ –≤—ã—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.`
let noPromptLoseUserText = `–í—ã –Ω–µ –≤–≤–µ–ª–∏ –ø—Ä–æ–º–ø—Ç –≤–æ–≤—Ä–µ–º—è, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.`
let noPromptWinUserText = `–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –≤–≤–µ–ª –ø—Ä–æ–º–ø—Ç, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!`

let startAnalyzeText = `<b>üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã...</b>`

export async function checkResultPrompt(matchId: number) {
    clearMatchTimer(matchId)
    const match = await matchRepository.findOne({
        where: {
            id: matchId
        },
        relations: ['player1', 'player2']
    })

    if (match.status !== MatchStatus.WAIT_PROMPTS) return true
    match.status = MatchStatus.ANALYZE
    await matchRepository.save(match)

    const config = await getCachedConfig()

    try { await sendMsgToUser(match.player1.tgId, startAnalyzeText); } catch (e) {}
    try { await sendMsgToUser(match.player2.tgId, startAnalyzeText); } catch (e) {}

    if (match.player1Prompt === '' && match.player2Prompt === '') {
        pool.markGameFinished(match.player1.id,match.player2.id)
        try {
            match.player1.balance = Number(match.player1.balance) - getPercent(match.bet, config.matchFeePercent)
            match.player1.wager = Math.max(0,Number(match.player1.wager) - match.bet)

            match.player2.balance = Number(match.player2.balance) - getPercent(match.bet, config.matchFeePercent)
            match.player2.wager = Math.max(0,Number(match.player2.wager) - match.bet)

            await userRepository.save([
                match.player1,match.player2
            ])

            try { await sendMsgToUser(match.player1.tgId, noPromptsUserText); } catch (e) {}
            try { await sendMsgToUser(match.player2.tgId, noPromptsUserText); } catch (e) {}

            match.status = MatchStatus.SUCCESSFUL
            await matchRepository.save(match)
            return true
        } catch (e) {
            match.status = MatchStatus.ERROR
            await matchRepository.save(match)
            return false
        }
    }

    try {
        let { text } = await AI.aiGenerateText({
            model: AI.client("gpt-4o"),
            prompt: `–¢—ã - —Å—É–¥—å—è –≤ –∏–≥—Ä–µ, –≥–¥–µ –∏–≥—Ä–æ–∫–∏ –ø—ã—Ç–∞—é—Ç—Å—è —É–≥–∞–¥–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: "${match.originalPrompt}"

–û—Ç–≤–µ—Ç –ò–≥—Ä–æ–∫–∞ 1: "${match.player1Prompt}"
–û—Ç–≤–µ—Ç –ò–≥—Ä–æ–∫–∞ 2: "${match.player2Prompt}"

–í–ê–ñ–ù–û: –¢—ã –î–û–õ–ñ–ï–ù –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è. –ù–∏—á—å—è –≤–æ–∑–º–æ–∂–Ω–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ ÔøΩÔøΩ—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –ø–æ —Å–º—ã—Å–ª—É –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏.

–û—Ü–µ–Ω–∏ —Ç–æ—á–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 100, –≥–¥–µ 100 - –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –ø–æ —Å–º—ã—Å–ª—É –∏ –¥–µ—Ç–∞–ª—è–º.

–£—á–∏—Ç—ã–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:
1. –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫ —É–ª–æ–≤–∏–ª –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –∏ –æ–±—ä–µ–∫—Ç—ã (–Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ)
2. –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ –æ–ø–∏—Å–∞–Ω—ã –¥–µ—Ç–∞–ª–∏, —Ü–≤–µ—Ç–∞, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è
3. –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ —Å—Ç–∏–ª—å
4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
6. –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ—Å—Ç–∞–≤–∏–ª –ø–æ–ª–µ –ø—É—Å—Ç–∏–º, –∑–∞–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ -1, –Ω–æ –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç, —Ö–æ—Ç—å 1 –±—É–∫–≤–∞, —Ç–æ —Å—á–∏—Ç–∞–µ–º

–î–∞–∂–µ –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –Ω–µ–±–æ–ª—å—à–∞—è, —Ç—ã –î–û–õ–ñ–ï–ù –æ—Ç—Ä–∞–∑–∏—Ç—å —ç—Ç—É —Ä–∞–∑–Ω–∏—Ü—É –≤ –æ—Ü–µ–Ω–∫–∞—Ö.
–ï—Å–ª–∏ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ —É–ø–æ–º—è–Ω—É–ª –±–æ–ª—å—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ —Ç–æ—á–Ω–µ–µ –æ–ø–∏—Å–∞–ª —Å—Ü–µ–Ω—É, –µ–≥–æ –æ—Ü–µ–Ω–∫–∞ –î–û–õ–ñ–ù–ê –±—ã—Ç—å –≤—ã—à–µ.

–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º.
–ó–∞—Ç–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏ –æ—Ü–µ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –æ—Ç—Ä–∞–∂–∞—é—Ç —Ä–∞–∑–Ω–∏—Ü—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–æ–≤.

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π:
{
  "player1Accuracy": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
  "player2Accuracy": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
  "originalPromptRu": "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–Ω–µ –±–æ–ª—å—à–µ 170 —Å–∏–º–≤–æ–ª–æ–≤)",
  "reasoning": "–û—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –ø–æ—á–µ–º—É —Ç—ã –ø—Ä–∏—Å–≤–æ–∏–ª –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏ –∫–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏"
}`,
            temperature: 0.1,
            maxTokens: 500,
        })
        pool.markGameFinished(match.player1.id,match.player2.id)

        text = text.replaceAll("```json", "")
        text = text.replaceAll("```", "")
        const result = JSON.parse(text) as PromptAccuracyResult

        if (result.player1Accuracy > result.player2Accuracy) {
            match.win = match.player1
            match.player1.wager = Math.max(0,Number(match.player1.wager) - match.bet)
            match.player2.wager = Math.max(0,Number(match.player2.wager) - match.bet)

            match.player1.totalWin = Number(match.player1.totalWin) + 1
            match.player2.totalLose = Number(match.player2.totalLose) + 1
            match.player1.totalWinAmount = Number(match.player1.totalWinAmount) + match.bet * 2 - getPercent(match.bet * 2, config.matchFeePercent)

            match.player2.balance = Number(match.player2.balance) - match.bet
            match.player1.balance = Number(match.player1.balance) + match.bet - getPercent(match.bet * 2, config.matchFeePercent)

            try { await sendMsgToUser(match.win.tgId, await genMatchPromptResultText(match,result,match.win)); } catch (e) {}
            try { await sendMsgToUser(match.player2.tgId, await genMatchPromptResultText(match,result,match.player2)); } catch (e) {}
        } else if (result.player1Accuracy < result.player2Accuracy) {
            match.win = match.player2
            match.player1.wager = Math.max(0,Number(match.player1.wager) - match.bet)
            match.player2.wager = Math.max(0,Number(match.player2.wager) - match.bet)

            match.player1.totalLose = Number(match.player1.totalLose) + 1
            match.player2.totalWin = Number(match.player2.totalWin) + 1
            match.player2.totalWinAmount = Number(match.player2.totalWinAmount) + match.bet * 2 - getPercent(match.bet * 2, config.matchFeePercent)

            match.player1.balance = Number(match.player1.balance) - match.bet
            match.player2.balance = Number(Number(match.player2.balance)) + match.bet - getPercent(match.bet * 2, config.matchFeePercent)

            try { await sendMsgToUser(match.win.tgId, await genMatchPromptResultText(match,result,match.win)); } catch (e) {}
            try { await sendMsgToUser(match.player1.tgId, await genMatchPromptResultText(match,result,match.player1)); } catch (e) {}
        } else {
            match.player1.wager = Math.max(0,Number(match.player1.wager) - match.bet)
            match.player2.wager = Math.max(0,Number(match.player2.wager) - match.bet)

            match.player1.balance = Number(match.player1.balance) - getPercent(match.bet, config.matchFeePercent)
            match.player2.balance = Number(match.player2.balance) - getPercent(match.bet, config.matchFeePercent)

            try { await sendMsgToUser(match.player1.tgId, await genMatchPromptResultText(match,result,match.player1, true)); } catch (e) {}
            try { await sendMsgToUser(match.player2.tgId, await genMatchPromptResultText(match,result,match.player2, true)); } catch (e) {}
        }

        await userRepository.save([
            match.player1,match.player2
        ])

        match.status = MatchStatus.SUCCESSFUL
        await matchRepository.save(match)

        try {
            if (!match.win) return;

            await alertBot.api.sendPhoto(config.channelLiveId, match.img_url, {
                parse_mode: "HTML",
                caption: `
<b>üèÜ –ü–û–ë–ï–î–ê –í –ú–ê–¢–ß–ï ‚Äî BattleAI üèÜ</b>

<b>üéØ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</b> ${await getUsername(match.win, match.win.usernameVisibility)}
<b>üí∞ –í—ã–∏–≥—Ä—ã—à:</b> ${match.bet * 2 - getPercent(match.bet * 2, match.feePercent)} ‚ÇΩ
<b>üìä –¢–æ—á–Ω–æ—Å—Ç—å:</b> ${(match.win.id === match.player1.id) ? result.player1Accuracy : '61'}%
                `,
                reply_markup: {
                    inline_keyboard: [
                        [{text: "üî•Ô∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è –ü–†–ò–°–û–ï–î–ò–ù–Ø–ô–¢–ï–°–¨ –ö –ò–ì–†–ï! üî•Ô∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è", url: `https://t.me/BattleAI_robot`}]
                    ]
                }
            })
        } catch (e) {
            console.log(e)
        }
    } catch (e) {
        log.error(e)
        match.status = MatchStatus.ERROR
        await matchRepository.save(match)
        return false
    }

}