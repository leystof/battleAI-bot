import {Composer, InlineKeyboard} from "grammy";
import {Context} from "@/database/models/context";
import {Scene} from "grammy-scenes";
import {
    armoneyRepository,
    configRepository,
    transactionRepository,
    userRepository
} from "@/database";
import {Transaction} from "@/database/models/payments/transaction";
import {
    ARMoneyTransactionCurrency,
    ARMoneyTransactionStatus,
} from "@/database/models/payments/interfaces/armoney";
import { v4 as uuidv4 } from 'uuid';
import {getUsername} from "@/helpers/getUsername";
import {Armoney} from "@/database/models/payments/armoney";
import {TransactionStatus, TransactionType} from "@/database/models/payments/interfaces/transaction";
export const composer = new Composer<Context>()
composer.callbackQuery('wallet withdraw', withdraw)


async function withdraw(ctx: Context) {
    try {
        await ctx.answerCallbackQuery()
    } catch (e) {}

    return ctx.scenes.enter('wallet topup withdraw value')
}

export const scene = new Scene<Context>('wallet topup withdraw value')

async function cancel (ctx) {
    try {
        await ctx.deleteMessage()
        ctx.scene.exit()
    } catch (e) {}
}

scene.always().callbackQuery('wallet topup withdraw value', cancel)

scene.do(async (ctx: Context) => {
    console.log(1)
    const response = await ctx.reply("<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:</b>", {
        reply_markup: {
            inline_keyboard: [
                [{text: "–û—Ç–º–µ–Ω–∞", callback_data: "wallet topup withdraw value"}]
            ]
        }
    })
    // @ts-ignore
    ctx.scene.resume()
//
})

scene.wait().hears(/\d+/, async (ctx: Context) => {
    const amount = Number(ctx.message.text)
    ctx.session.amount = amount

    const config = await configRepository.findOne({where: {id: 1},
        relations: ['withdrawRubProvider']
    })

    if (amount < config.withdrawRubProvider.minPayOut) {
        // @ts-ignore
        try {ctx.scene.exit()} catch (e) {}
        return ctx.reply(`<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> ${config.withdrawRubProvider.minPayOut} ‚ÇΩ`, {
            reply_markup: {
                inline_keyboard: [
                    [{text: "–ù–∞–∑–∞–¥", callback_data: "wallet menu"}]
                ]
            }
        })
    }

    if (amount > Number(ctx.user.balance)) {
        // @ts-ignore
        try {ctx.scene.exit()} catch (e) {}
        return ctx.reply(`
‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞</b>

üí∏ <b>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞:</b> ${amount} ‚ÇΩ
üí∞ <b>–í–∞—à –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> ${ctx.user.balance} ‚ÇΩ
üìä <b>–ù–µ–¥–æ—Å—Ç–∞–µ—Ç:</b> ${amount - Number(ctx.user.balance)} ‚ÇΩ

–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º—É–º ${Number(ctx.user.balance)} ‚ÇΩ. –≠—Ç–æ –≤–∞—à —Ç–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–∞ –≤—ã—á–µ—Ç–æ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.
        `, {
            reply_markup: {
                inline_keyboard: [
                    [{text: "–ó–∞–∫—Ä—ã—Ç—å", callback_data: "deleteMessage"}]
                ]
            }
        })
    }

    if (amount > Number(ctx.user.balance) - Number(ctx.user.wager)) {
        // @ts-ignore
        try {ctx.scene.exit()} catch (e) {}
        return ctx.reply(`
‚ùå <b>–í—ã–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–µ–π–¥–∂–µ—Ä–∞</b>

üí∞ <b>–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–≤–µ—Å—Ç–∏:</b> ${amount} ‚ÇΩ

‚ö†Ô∏è –ü–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—ã–≥—Ä–∞—Ç—å –≤–µ–π–¥–∂–µ—Ä:
‚Ä¢ <b>–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç—ã–≥—Ä–∞—Ç—å:</b> ${amount - Math.max(0,Number(ctx.user.balance) - Number(ctx.user.wager))} ‚ÇΩ
‚Ä¢ <b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> ${Math.max(0,Number(ctx.user.balance) - Number(ctx.user.wager))} ‚ÇΩ

‚ÑπÔ∏è –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤–µ–π–¥–∂–µ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã. –ö–∞–∂–¥–∞—è –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Å—á–µ—Ç –æ—Ç—ã–≥—Ä—ã—à–∞ –≤–µ–π–¥–∂–µ—Ä–∞.
        `, {
            reply_markup: {
                inline_keyboard: [
                    [{text: "üéÆ –ò–≥—Ä–∞—Ç—å", callback_data: "game menu"}],
                    [{text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "wallet menu"}],
                    [{text: "‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ –≤–µ–π–¥–∂–µ—Ä?", callback_data: "wager help"}],
                ]
            }
        })
    }



    await ctx.reply(`<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</b>`, {
        reply_markup: {
            inline_keyboard: [
                [{text: "–û—Ç–º–µ–Ω–∞", callback_data: "wallet topup withdraw value"}]
            ]
        }
    })

    // @ts-ignore
    ctx.scene.resume()
})

scene.wait().hears(/.+/, async (ctx: Context) => {
    if (ctx.message.text && ctx.message.text.length > 255) {
        return ctx.reply("<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 255 —Å–∏–º–≤–æ–ª–æ–≤</b>",
            {
                reply_markup: {
                    inline_keyboard: [
                        [{text: "–û—Ç–º–µ–Ω–∞", callback_data: "wallet topup withdraw value"}]
                    ]
                }
            })
    }

    const config = await configRepository.findOne({where: {id: 1},relations: ["withdrawRubProvider"]})

    const newTx = new Armoney()
    newTx.externalId = uuidv4();
    newTx.user = ctx.user
    newTx.userId = ctx.user.id
    newTx.amount = ctx.session.amount
    newTx.percentProvider = 0
    newTx.type = TransactionType.WITHDRAW
    newTx.status = ARMoneyTransactionStatus.CREATE
    newTx.currency = ARMoneyTransactionCurrency.RUB

    await armoneyRepository.save(newTx)

    try {
        await ctx.api.sendMessage(config.channelPayOutId, `
#ID_${newTx.externalId}

<b>–°—É–º–º–∞:</b> <code>${ctx.session.amount}</code> ‚ÇΩ
<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${ctx.message.text}</code>
<b>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</b> ARMoney

<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${await getUsername(ctx.user)}
<b>ID:</b> ${ctx.user.id}
        `, {
            reply_markup: {
                inline_keyboard: [
                    [{text: "‚ùáÔ∏è –û–ø–ª–∞—Ç–∏—Ç—å", callback_data: `payout accept ${newTx.externalId}`}],
                    [{text: "üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: `payout cancel ${newTx.externalId}`}],
                ]
            }
        })

        await ctx.reply(`
üè∑ ID: ${newTx.externalId}

<b>–°—É–º–º–∞:</b> ${ctx.session.amount} ‚ÇΩ
<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> ${ctx.message.text}

<b>–ó–∞—è–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π, –±–∞–ª–∞–Ω—Å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω.</b>
        `)

        ctx.user.balance = Number(ctx.user.balance) - Number(ctx.session.amount)
        ctx.user.reservedBalance = Number(ctx.user.reservedBalance) + Number(ctx.session.amount)
        await userRepository.save(ctx.user)
    } catch (e) {
        await ctx.reply(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.`)
    }
    // @ts-ignore
    try {ctx.scene.exit()} catch (e) {}
})

