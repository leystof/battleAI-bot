import {Context} from "@/database/models/context";
import {getCachedConfig} from "@/modules/cache/config";
import {cryptomusRepository, tierProviderRepository, transactionRepository} from "@/database";
import {getPercent} from "@/helpers/getPercent";
import {ARMoneyTransactionCurrency, ARMoneyTransactionStatus} from "@/database/models/payments/interfaces/armoney";
import { v4 as uuidv4 } from 'uuid';
import {alertBot} from "@/utils/bot";
import {getUsername} from "@/helpers/getUsername";
import {Transaction} from "@/database/models/payments/transaction";
import {cryptomus} from "@/services/payments/cryptomus";
import {CryptomusInvoicePayload, CryptomusInvoiceResponse} from "@/services/payments/cryptomus/interfaces";
import {TransactionStatus, TransactionType} from "@/database/models/payments/interfaces/transaction";
import {Cryptomus} from "@/database/models/payments/cryptomus";
import {CryptomusStatus} from "@/database/models/payments/interfaces/cryptomus";

export async function preInvoiceUsdt(ctx: Context) {
    const provider = ctx.match[1]
    const amount = Number(ctx.match[2])
    const config = await getCachedConfig()
    const tier = await tierProviderRepository.findOne({where: {provider: config.paymentUsdtProvider},})

    if (amount < config.paymentUsdtProvider.minTopUp) {
        return ctx.reply(`<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> ${config.paymentUsdtProvider.minTopUp} USDT`)
    }

    return ctx.editMessageText(`
üí∞ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>

üí≥ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> ${amount} USDT
üíµ <b>–ü–æ—Å—Ç—É–ø–∏—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å:</b> ${amount - getPercent(amount,tier.percent)} ${config.currencyName}

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å.

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ?`, {
        reply_markup: {
            inline_keyboard: [
                [{text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data: `wallet topup provider ${provider} ${amount} create`}],
            ]
        }
    })
}

export async function createInvoiceUsdt(ctx: Context) {
    const configDb = await getCachedConfig()
    console.log(123)
    const tier = await tierProviderRepository.findOne({where: {provider: configDb.paymentUsdtProvider}})

    const amount = Number(ctx.match[2])
    await ctx.editMessageText(`‚è≥Ô∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã...`, {
        reply_markup: {
            inline_keyboard: []
        }
    })

    const operationId = uuidv4()
    let createInvoice: CryptomusInvoiceResponse
    try {
        createInvoice = await cryptomus.createInvoice({
            amount: String(amount),
            currency: "USD",
            is_payment_multiple: false,
            subtract: 100,
            order_id: operationId
        })
    } catch (e) {
        try {
            await alertBot.api.sendMessage(configDb.channelInvoiceId, `
#ERROR_CREATE_PAYMENT

<b>${configDb.paymentUsdtProvider.name.toUpperCase()}</b>
<b>Operation ID:</b> ${operationId}
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${await getUsername(ctx.user)}
<b>ID:</b> ${ctx.user.id}
<pre>${e.toString()}</pre>
        `, {
                parse_mode: "HTML"
            })
        } catch (e) {console.log(e)}
        return ctx.editMessageText("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
    }



    const newTx = new Cryptomus()
    newTx.externalId = operationId
    newTx.user = ctx.user
    newTx.userId = ctx.user.id
    newTx.amount = Number(amount)
    newTx.percentProvider = tier.percent
    newTx.type = TransactionType.TOP_UP
    newTx.status = CryptomusStatus.CONFIRM_CHECK
    newTx.currency = ARMoneyTransactionCurrency.USDT

    await cryptomusRepository.save(newTx)
    return ctx.editMessageText(`
üè∑ ID: ${newTx.externalId}

<b>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã</b>`,{
        reply_markup: {
            inline_keyboard: [
                [{text: "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã", url: `${createInvoice["url"]}`}]
            ]
        }
    })
}

