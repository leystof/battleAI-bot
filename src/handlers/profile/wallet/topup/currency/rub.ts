import {Context} from "@/database/models/context";
import {getCachedConfig} from "@/modules/cache/config";
import {armoneyRepository, tierProviderRepository, transactionRepository} from "@/database";
import {getPercent} from "@/helpers/getPercent";
import {rubToUsdt} from "@/helpers/payments/rubToUsdt";
import {
    ARMoneyTransactionCurrency,
    ARMoneyTransactionStatus,
} from "@/database/models/payments/interfaces/armoney";
import {MoreThan} from "typeorm";
import {v4 as uuidv4} from "uuid";
import {arMoney} from "@/services/payments/ARMoney";
import {alertBot} from "@/utils/bot";
import {getUsername} from "@/helpers/getUsername";
import {Transaction} from "@/database/models/payments/transaction";
import {config} from "@/utils/config";
import {TransactionType} from "@/database/models/payments/interfaces/transaction";
import {Armoney} from "@/database/models/payments/armoney";

export async function preInvoiceRub(ctx: Context) {
    const provider = ctx.match[1]
    const amount = Number(ctx.match[2])
    const config = await getCachedConfig()
    const tier = await tierProviderRepository.findOne({where: {provider: config.paymentRubProvider},})

    if (amount < config.paymentRubProvider.minTopUp) {
        return ctx.reply(`<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> ${config.paymentRubProvider.minTopUp} ‚ÇΩ`)
    }

    return ctx.editMessageText(`
üí∞ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>

üí≥ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> ${amount} ‚ÇΩ
üíµ <b>–ü–æ—Å—Ç—É–ø–∏—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å:</b> ${await rubToUsdt(amount, {percent: tier.percent, extraPercent: tier.extraPercent, source: config.paymentRubProvider.name as undefined})} ${config.currencyName}

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å.

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ?`, {
        reply_markup: {
            inline_keyboard: [
                [{text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data: `wallet topup provider ${provider} ${amount} create`}],
            ]
        }
    })
}

export async function createInvoiceRub(ctx: Context) {
    const configDb = await getCachedConfig()
    const amount = Number(ctx.match[2])

    const tx = await armoneyRepository.findOne({
        where: {
            user: {
                id: ctx.user.id
            },
            type: TransactionType.TOP_UP,
            status: ARMoneyTransactionStatus.CREATE,
            created_at: MoreThan(new Date(Date.now() - 60 * 60 * 1000)) // 1 hour
        }, relations: ["user"]
    })

    if (tx) {
        return ctx.reply(`üè∑ ID: ${tx.externalId}

<b>–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–ª–∞—Ç–µ–∂</b>
        `, {
            reply_markup: {
                inline_keyboard: [
                    [{text: "üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: `wallet cancel invoice ${tx.externalId}`}],
                ]
            }
        })
    }
    const tier = await tierProviderRepository.findOne({where: {provider: configDb.paymentRubProvider}})

    await ctx.editMessageText(`‚è≥Ô∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã...`, {
        reply_markup: {
            inline_keyboard: []
        }
    })

    const operationId = uuidv4()
    let createInvoice = undefined
    try {
        createInvoice = await arMoney.createInvoice({
            amount: amount,
            operation_id: operationId,
            pair: "USDT-RUB",
            redirect_url: `https://t.me/${ctx.me.username}`,
        })
    } catch (e) {
        try {
            await alertBot.api.sendMessage(configDb.channelInvoiceId, `
#ERROR_CREATE_PAYMENT

<b>${configDb.paymentRubProvider.name.toUpperCase()}</b>
<b>Operation ID:</b> ${operationId}
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${await getUsername(ctx.user)}
<b>ID:</b> ${ctx.user.id}
<pre>${e.toString()}</pre>
        `, {
                parse_mode: "HTML"
            })
        } catch (e) {console.log(e)}
        return ctx.editMessageText("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
    }



    const newTx = new Armoney()
    newTx.externalId = createInvoice["id"]
    newTx.user = ctx.user
    newTx.userId = ctx.user.id
    newTx.amount = Number(createInvoice["amount"])
    newTx.percentProvider = tier.percent
    newTx.extraFeePercent = tier.extraPercent
    newTx.type = TransactionType.TOP_UP
    newTx.status = ARMoneyTransactionStatus.CREATE
    newTx.currency = ARMoneyTransactionCurrency.RUB
    newTx.operationId = operationId

    await armoneyRepository.save(newTx)
    return ctx.editMessageText(`
üè∑ ID: ${newTx.externalId}

<b>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã</b>`,{
        reply_markup: {
            inline_keyboard: [
                [{text: "üí≥ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã", url: `${config.armoney.payUrl}/${createInvoice["id"]}`}],
                [{text: "üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: `wallet cancel invoice ${createInvoice["id"]}`}],
            ]
        }
    })
}
