import {Composer, InlineKeyboard} from "grammy";
import {Context} from "@/database/models/context";
import {Scene} from "grammy-scenes";
import {configRepository, tierProviderRepository} from "@/database";
import {getPercent} from "@/helpers/getPercent";

export const composer = new Composer<Context>()
composer.callbackQuery(/wallet topup (another)/, setAnotherValue)

async function setAnotherValue(ctx: Context) {
    try {
        await ctx.answerCallbackQuery()
    } catch (e) {}

    return ctx.scenes.enter('wallet topup another value')
}

export const scene = new Scene<Context>('wallet topup another value')

async function cancel (ctx) {
    try {
        await ctx.deleteMessage()
        ctx.scene.exit()
    } catch (e) {}
}

scene.always().callbackQuery('wallet topup another value', cancel)

scene.do(async (ctx) => {
    const response = await ctx.reply("<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>", {
        reply_markup: {
            inline_keyboard: [
                [{text: "–û—Ç–º–µ–Ω–∞", callback_data: "wallet topup another value"}]
            ]
        }
    })
    ctx.scene.resume()
})

scene.wait().hears(/\d+/, async (ctx: Context) => {
    const amount = Number(ctx.message.text)
    const config = await configRepository.findOne({where: {id: 1},
        relations: ['paymentRubProvider']
    })

    if (amount < config.paymentRubProvider.minTopUp) {
        // @ts-ignore
        try {ctx.scene.exit()} catch (e) {}
        return ctx.reply(`<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> ${config.paymentRubProvider.minTopUp} ‚ÇΩ`, {
            reply_markup: {
                inline_keyboard: [
                    [{text: "–ù–∞–∑–∞–¥", callback_data: "wallet menu"}]
                ]
            }
        })
    }
    const tier = await tierProviderRepository.findOne({where: {provider: config.paymentRubProvider},})

    try {
        // @ts-ignore
        ctx.scene.exit()
    } catch (e) {}
    return ctx.reply(`
üí∞ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>

üí≥ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> ${amount} ‚ÇΩ
üíµ <b>–ü–æ—Å—Ç—É–ø–∏—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å:</b> ${amount - getPercent(amount,tier.percent)} ‚ÇΩ
üìä <b>–ö–æ–º–∏—Å—Å–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:</b> ${getPercent(amount,tier.percent)} ‚ÇΩ (${tier.percent}%)

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å.

–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ?`, {
        reply_markup: {
            inline_keyboard: [
                [{text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data: `wallet topup ${amount} create`}],
            ]
        }
    })
})
