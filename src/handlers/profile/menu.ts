import {Composer, InlineKeyboard} from "grammy";
import {Context} from "@/database/models/context";
import {UserStatus} from "@/database/models/user";
import {formatIntWithDot} from "@/helpers/formatIntWithDot";
import {getWinPercent} from "@/helpers/winPercent";
import {cryptomus} from "@/services/payments/cryptomus";
import {Config} from "@/database/models/config";
import {getCachedConfig} from "@/modules/cache/config";

export const composer = new Composer<Context>()
composer.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', profileMenu)
composer.callbackQuery('profile menu', profileMenuCallback)

const text = (ctx: Context, configDb: Config) => {
    return `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å

ID: ${ctx.user.id}
–ò–º—è: ${ctx.from.first_name}
–ë–∞–ª–∞–Ω—Å: ${formatIntWithDot(ctx.user.balance)} ${configDb.currencyName}
–ù–∞ –≤—ã–≤–æ–¥–µ: ${formatIntWithDot(ctx.user.reservedBalance)} ${configDb.currencyName}
–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: ${(ctx.user.status === UserStatus.ACTIVE) ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : 'üü• –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞: ${(ctx.user.usernameVisibility) ? 'üëÅ –í–∏–¥–µ–Ω' : 'üôà –°–∫—Ä—ã—Ç'}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: ${Number(ctx.user.totalWin) + Number(ctx.user.totalLose)}
–ü–æ–±–µ–¥: ${Number(ctx.user.totalWin)}
–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: ${getWinPercent(Number(ctx.user.totalWin),Number(ctx.user.totalLose))}%
–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${Number(ctx.user.totalWinAmount)} ${configDb.currencyName}`
}

const keyb = (ctx: Context) => {
    return new InlineKeyboard()
        .text('üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫', "wallet menu").row()
        .text((ctx.user.usernameVisibility) ? 'üôà –°–∫—Ä—ã—Ç—å –Ω–∏–∫–Ω–µ–π–º' : 'üëÅ –û—Ç–∫—Ä—ã—Ç—å –Ω–∏–∫–Ω–µ–π–º', "profile swap nickname visibility").row()
        // .text("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "refferal menu")
}
export async function profileMenu(ctx) {
    // try {
    //     const cr = await cryptomus.createInvoice({
    //         amount: "25000",
    //         currency: "USD",
    //         is_payment_multiple: false,
    //         subtract: 100,
    //         order_id: "123–∞23"
    //     })
    //
    //     console.log(cr)
    // } catch (e) {
    //     console.log(e)
    // }

    return ctx.reply(text(ctx, await getCachedConfig()),{
        reply_markup: keyb(ctx)
    })
}

export async function profileMenuCallback(ctx) {


    return ctx.editMessageText(text(ctx,await getCachedConfig()),{
        reply_markup: keyb(ctx)
    })
}
